// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_ll
double get_ll(arma::cube x, arma::mat mu, arma::cube sig, int R, int p, arma::uvec cl);
RcppExport SEXP _matclust_get_ll(SEXP xSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP RSEXP, SEXP pSEXP, SEXP clSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cl(clSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ll(x, mu, sig, R, p, cl));
    return rcpp_result_gen;
END_RCPP
}
// em_step
List em_step(arma::cube x, arma::mat mu, arma::cube Sigma, arma::mat z, arma::vec pr, arma::uvec cl, arma::cube A, int n, int K, int R, int p, int iter);
RcppExport SEXP _matclust_em_step(SEXP xSEXP, SEXP muSEXP, SEXP SigmaSEXP, SEXP zSEXP, SEXP prSEXP, SEXP clSEXP, SEXP ASEXP, SEXP nSEXP, SEXP KSEXP, SEXP RSEXP, SEXP pSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pr(prSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cl(clSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(em_step(x, mu, Sigma, z, pr, cl, A, n, K, R, p, iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matclust_get_ll", (DL_FUNC) &_matclust_get_ll, 6},
    {"_matclust_em_step", (DL_FUNC) &_matclust_em_step, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_matclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
